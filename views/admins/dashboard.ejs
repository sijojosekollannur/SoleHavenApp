<style>
    .main-content {
        margin: 0;
        padding-left: 200px;
        padding-bottom: 50px;
    }
    .vertical-line {
        border-left: 1px solid #dee2e6;
        height: auto;
        margin: 0 20px;
    }
    .card {
        margin: 20px 0;
    }
    .Topbtn {
    background-color: #4CAF50; /* Green */
    border: none;
    color: white;
    padding: 15px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 10px 0;
    cursor: pointer;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    transition: background-color 0.3s ease;
  }
  .Topbtn:hover {
    background-color: #45a049; /* Darker Green */
  }
</style>

<div class="main-content">
    <div class="row">
        <div class="col-12">
            <button class="navbar-toggler btn btn-dark d-md-none" type="button" id="menuToggle">
                <i class="fas fa-bars"></i>
            </button>
        </div>
    </div>
    <div class="row">
        <div class="col-12" id="adminContent">
            <div class="container mt-4">
                <div class="row">
                    <div class="col-md-6">
                        <h2>Total Sale</h2>
                        <canvas id="todayOrderChart" width="400" height="400"></canvas>
                    </div>
                    <div class="vertical-line"></div>
                    <div class="col-md-6">
                        <h2>Monthly Income</h2>
                        <canvas id="monthlyIncomeChart" width="400" height="400"></canvas>
                    </div>
                </div>
                <hr>
                <div class="row mt-4">
                    <div class="col-md-12 col-12">
                        <a href="/admin/top-selling" class="Topbtn">View Top Sellings</a>
                        <h2>Order Details</h2>
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Payment Method</th>
                                    <th>Tax Amount</th>
                                    <th>Price</th>
                                    <th>Order Date</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody id="orderDetailsTable">
                                <% data.orderDetails.forEach(order => { %>
                                    <tr>
                                        <td><%= order.products.map(p => p.productName).join(', ') %></td>
                                        <td><%= order.paymentMethod %></td>
                                        <td>₹<%= order.tax ? order.tax.toFixed(2) : 'N/A' %></td>
                                        <td>₹<%= order.totalAmount.toFixed(2) %></td>
                                        <td><%= new Date(order.orderDate).toLocaleString('en-US', { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' }) %></td>
                                        <td><%= order.orderStatus %></td>
                                    </tr>
                                <% }) %>
                            </tbody>
                        </table>
                    </div>
                </div>
                <hr>
                <div class="row mt-4">
                    <div class="col-md-12">
                        <h2>Generate Sales Report</h2>
                        <form id="salesReportForm">
                            <div class="form-row">
                                <div class="form-group col-md-3">
                                    <label for="reportType">Report Type</label>
                                    <select id="reportType" class="form-control">
                                        <option value="daily">Daily</option>
                                        <option value="weekly">Weekly</option>
                                        <option value="yearly">Yearly</option>
                                        <option value="custom">Custom</option>
                                    </select>
                                </div>
                                <div class="form-group col-md-3">
                                    <label for="startDate">Start Date</label>
                                    <input type="date" id="startDate" class="form-control">
                                </div>
                                <div class="form-group col-md-3">
                                    <label for="endDate">End Date</label>
                                    <input type="date" id="endDate" class="form-control">
                                </div>
                                <div class="form-group col-md-3 align-self-end">
                                    <button type="submit" class="btn btn-primary btn-block">Generate Report</button>
                                </div>
                            </div>
                        </form>
                        <div id="reportContainer" class="mt-4"></div>
                        <form id="downloadReportForm">
                            <label for="startDate">Start Date:</label>
                            <input type="date" id="startDate" name="startDate" required>
                            <label for="endDate">End Date:</label>
                            <input type="date" id="endDate" name="endDate" required>
                            <div class="mt-4">
                                <button type="button" id="downloadPdf" class="btn btn-info">Download PDF</button>
                                <button type="button" id="downloadExcel" class="btn btn-success">Download Excel</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
 $(document).ready(function() {
    const fetchDashboardData = () => {
        $.ajax({
            url: '/admin/dashboard',
            method: 'GET',
            dataType: 'json',
            success: function(data) {
                console.log('Parsed dashboard data:', data);
                
                if (data.salesData && data.incomeData && data.orderDetails) {
                    initCharts(data.salesData, data.incomeData);
                    updateOrderDetails(data.orderDetails);
                } else {
                    console.error('Received incomplete data from the server:', data);
                    $('#adminContent').html('<p>Error: Incomplete data received. Please try again later.</p>');
                }
            },
            error: function(xhr, status, error) {
                console.error('Error fetching dashboard data:', error);
                let errorMessage = 'Unable to load dashboard data. ';
                if (xhr.responseText && xhr.responseText.trim().startsWith('<')) {
                    errorMessage += 'The server returned an HTML response instead of JSON. This might indicate a server-side error.';
                } else {
                    errorMessage += error;
                }
                $('#adminContent').html(`<p>Error: ${errorMessage}</p>`);
            }
        });
    };

    const initCharts = (salesData, incomeData) => {
        const todayOrderChartCtx = document.getElementById('todayOrderChart').getContext('2d');
        new Chart(todayOrderChartCtx, {
            type: 'line',
            data: {
                labels: salesData.labels,
                datasets: [{
                    label: 'Total Sales',
                    data: salesData.data,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
        
        const monthlyIncomeChartCtx = document.getElementById('monthlyIncomeChart').getContext('2d');
        new Chart(monthlyIncomeChartCtx, {
            type: 'bar',
            data: {
                labels: incomeData.labels,
                datasets: [{
                    label: 'Monthly Income',
                    data: incomeData.data,
                    backgroundColor: 'rgba(153, 102, 255, 0.2)',
                    borderColor: 'rgba(153, 102, 255, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });
    };

    const updateOrderDetails = (orderDetails) => {
        // Implement this function to update the order details in the DOM
        console.log('Updating order details:', orderDetails);
    };

    // Fetch data and initialize charts
    fetchDashboardData();

   });      



    // Update order details table
    const updateOrderDetails = (orderDetails) => {
        const tableBody = $('#orderDetailsTable');
        tableBody.empty();
        orderDetails.forEach(order => {
            const productNames = order.products.map(product => product.productName).join(', ');
            const formattedDate = new Date(order.orderDate).toLocaleString('en-US', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
            const row = `
                <tr>
                    <td>${productNames}</td>
                    <td>${order.paymentMethod}</td>
                    <td>₹${order.tax ? order.tax.toFixed(2) : 'N/A'}</td>
                    <td>₹${order.totalAmount.toFixed(2)}</td>
                    <td>${formattedDate}</td>
                    <td>${order.orderStatus}</td>
                </tr>
            `;
            tableBody.append(row);
        });
    };

    // Initialize dashboard
    fetchDashboardData();

</script>

<script>
    $(document).ready(function() {
        // Function to generate the sales report
        function generateSalesReport(e) {
            e.preventDefault(); // Prevent form submission
            
            const reportType = $('#reportType').val();
            const startDate = $('#startDate').val();
            const endDate = $('#endDate').val();
            
            // Show loading indicator
            $('#reportContainer').html('<p>Loading report...</p>');
            
            $.ajax({
                url: '/admin/salesReport', // Adjust this to match your server endpoint
                method: 'GET',
                data: { reportType, startDate, endDate },
                success: function(response) {
                    displaySalesReport(response);
                },
                error: function(xhr, status, error) {
                    console.error('Error fetching sales report:', error);
                    $('#reportContainer').html('<p class="text-danger">Error generating report. Please try again.</p>');
                }
            });
        }
        
        // Function to display the sales report
        function displaySalesReport(report) {
            let html = `
                <h3>Sales Report</h3>
                <p>Period: ${new Date(report.startDate).toLocaleDateString()} - ${new Date(report.endDate).toLocaleDateString()}</p>
                <div class="row">
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Total Sales</h5>
                                <p class="card-text">₹${report.totalSales.toFixed(2)}</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Total Orders</h5>
                                <p class="card-text">${report.totalOrders}</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Overall Discount</h5>
                                <p class="card-text">₹${report.overallDiscount.toFixed(2)}</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body">
                                <h5 class="card-title">Average Order Value</h5>
                                <p class="card-text">₹${report.averageOrderValue.toFixed(2)}</p>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="mt-4">
                    <canvas id="salesChart" width="400" height="200"></canvas>
                </div>
            `;
            
            $('#reportContainer').html(html);
            
            // Generate the chart
            const ctx = document.getElementById('salesChart').getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: report.dailyBreakdown.map(day => day.date),
                    datasets: [{
                        label: 'Daily Sales',
                        data: report.dailyBreakdown.map(day => day.sales),
                        borderColor: 'rgb(75, 192, 192)',
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
        
        // Event listener for the form submission
        $('#salesReportForm').on('submit', generateSalesReport);
        
        // Show/hide date inputs based on report type
        $('#reportType').on('change', function() {
            if ($(this).val() === 'custom') {
                $('#startDate, #endDate').prop('disabled', false).prop('required', true);
            } else {
                $('#startDate, #endDate').prop('disabled', true).prop('required', false);
            }
        });
        
        // Initialize the form (disable date inputs if not custom)
        $('#reportType').trigger('change');
    });
    </script>

<script>
     $(document).ready(function() {
        const handleDownload = (format) => {
            const startDate = $('#startDate').val();
            const endDate = $('#endDate').val();
            if (!startDate || !endDate) {
                alert('Please select both start date and end date.');
                return;
            }
            const url = `/admin/download-report?startDate=${startDate}&endDate=${endDate}&format=${format}`;
            window.location.href = url;
        };

        $('#downloadPdf').on('click', function() {
            handleDownload('pdf');
        });

        $('#downloadExcel').on('click', function() {
            handleDownload('excel');
        });
    });
</script>
